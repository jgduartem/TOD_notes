While Loop
A while loop is similar to the loop loop except that you declare the condition that will break out of the loop up front.

i = 0
while i < 10 do
 puts "i is #{i}"
 i += 1
end
This is an example of using a while loop with a count. Because you declare the condition that breaks the loop up 
front, the intention of your code is much clearer, making this code easier to read than our loop loop above.


Ranges
What if we know exactly how many times we want our loop to run? Ruby lets us use something called a range to 
define an interval. All we need to do is give Ruby the starting value, the ending value, and whether we want the 
range to be inclusive or exclusive.

(1..5)      # inclusive range: 1, 2, 3, 4, 5
(1...5)     # exclusive range: 1, 2, 3, 4

# We can make ranges of letters, too!
('a'..'d')  # a, b, c, d


For Loop
A for loop is used to iterate through a collection of information such as an array or range. These loops are useful if 
you need to do something a given number of times while also using an iterator.

for i in 0..5
  puts "#{i} zombies incoming!."
end
That’s really all there is to it.


Times Loop
If you need to run a loop for a specified number of times, then look no further than the trusty #times loop. 
It works by iterating through a loop a specified number of times and even throws in the bonus of accessing the 
number it’s currently iterating through.

5.times do
  puts "Hello, world!"
end
I’m sure you can guess what that code does. Ruby is easily readable that way!

5.times do |number|
  puts "Alternative fact number #{number}"
end
Remember, loops will start counting from a zero index unless specified otherwise, so the first loop iteration will 
output Alternative fact number 0.


Upto and Downto Loops

The Ruby methods #upto and #downto do exactly what you’d think they do from their names. You can use these 
methods to iterate from a starting number either up to or down to another number, respectively.

5.upto(10) {|num| print "#{num} " }     #=> 5 6 7 8 9 10

10.downto(5) {|num| print "#{num} " }   #=> 10 9 8 7 6 5
If you need to step through a series of numbers (or even letters) within a specific range, then these are the loops 
for you.


Iterators

Iterators are methods that naturally loop over a given set of data and allow you to operate on each element in the 
collection.

We said earlier that arrays are ordered lists. Let's say that you had an array of names and you wanted to print them 
to the screen. How could you do that? You could use the each method for arrays, like this:

# practice_each.rb

names = ['Bob', 'Joe', 'Steve', 'Janice', 'Susan', 'Helen']

names.each { |name| puts name }