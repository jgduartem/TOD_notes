Each

Calling #each on an array will iterate through that array and will yield each element to a code block, where a task
can be performed:

friends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']

friends.each { |friend| puts "Hello, " + friend }

#=> Hello, Sharon
#=> Hello, Leo
#=> Hello, Leila
#=> Hello, Brian
#=> Hello, Arun

#=> ["Sharon", "Leo", "Leila", "Brian" "Arun"]
Let’s break down this syntax:

friends is the array that contains strings of your friends’ names.
.each is the enumerable method you are calling on your friends array.
{ |friend| puts friend } is a block, and the code inside this block is run for each element in your array. Because we 
have 5 friends in our array, this block will be run 5 times, once with each of the 5 elements.
Within the block, you’ll notice that we have |friend|, which is known as a block variable. This is the element from 
your array that the block is currently iterating over. You can use any variable name that you find helpful here; in this 
example, we could have used |x|, but |friend| is more descriptive of what each element is. In the first iteration, the 
value of |friend| will be 'Sharon'; in the second iteration, its value will be 'Leo'; in the third, 'Leila'; and so on until it 
reaches the end of the array.
What if the block you want to pass to a method requires more logic than can fit on one line? It starts to become less 
readable and looks unwieldy. For multi-line blocks, the commonly accepted best practice is to change up the syntax 
to use do...end instead of {...}:

my_array = [1, 2]

my_array.each do |num|
  num *= 2
  puts "The new number is #{num}."
end

#=> The new number is 2.
#=> The new number is 4.

#=> [1, 2]
#each also works for hashes with a bit of added functionality. By default, each iteration will yield both the key and 
value individually or together (as an array) to the block depending on how you define your block variable:

my_hash = { "one" => 1, "two" => 2 }

my_hash.each { |key, value| puts "#{key} is #{value}" }

one is 1
two is 2
#=> { "one" => 1, "two" => 2}

my_hash.each { |pair| puts "the pair is #{pair}" }

the pair is ["one", 1]
the pair is ["two", 2]
#=> { "one" => 1, "two" => 2}
You may have noticed in the above code examples that #each returns the original array or hash regardless of what 
happens inside the code block. This is an important thing to keep in mind when debugging your code as it can lead 
to some confusion.


The each_with_index Method

This method is nearly the same as #each, but it provides some additional functionality by yielding two block 
variables instead of one as it iterates through an array. The first variable’s value is the element itself, while the 
second variable’s value is the index of that element within the array. This allows you to do things that are a bit 
more complex.

For example, if we only want to print every other word from an array of strings, we can achieve this like so:

fruits = ["apple", "banana", "strawberry", "pineapple"]

fruits.each_with_index { |fruit, index| puts fruit if index.even? }

#=> apple
#=> strawberry
#=> ["apple", "banana", "strawberry", "pineapple"]
Just like with the #each method, #each_with_index returns the original array it’s called on.


The map method

The #map method (also called #collect) transforms each element from an array according to whatever block you 
pass to it and returns the transformed elements in a new array. #map may seem confusing at first, but it is 
extremely useful. We’ll go through several examples and use cases, which should help you understand how and 
when you can use this enumerable power for good.

First, let’s use #map to improve on our code that transforms all of our friends’ names to uppercase:

friends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']

friends.map { |friend| friend.upcase }
#=> `['SHARON', 'LEO', 'LEILA', 'BRIAN', 'ARUN']`



The select method

The #select method (also called #filter) passes every item in an array to a block and returns a new array with only 
the items for which the condition you set in the block evaluated to true.

friends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']

friends.select { |friend| friend != 'Brian' }

 #=> ["Sharon", "Leo", "Leila", "Arun"]


Enumerable Iterators Cheat Sheet

#each returns the original object it was called on because it's really used for its side effects and not what it returns
#each_with_index passes not just the current item but whatever position in the array it was located in.
#select returns a new object (e.g. array) filled with only those original items where the block you gave it returned 
true
#map returns a new array filled with whatever gets returned by the block each time it runs.

#group_by will run your block and return a hash that groups all the different types of returns from that block. 
For example:

> names = ["James", "Bob", "Joe", "Mark", "Jim"]
> names.group_by{|name| name.length}
=> {5=>["James"], 3=>["Bob", "Joe", "Jim"], 4=>["Mark"]} 
