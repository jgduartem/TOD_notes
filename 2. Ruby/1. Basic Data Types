Converting Number Types
Ruby makes it very easy to convert floats to integers and vice versa.

# To convert an integer to a float:
13.to_f   #=> 13.0

# To convert a float to an integer:
13.0.to_i #=> 13
13.9.to_i #=> 13

As shown in the last example above, when Ruby converts a float to an integer, the decimal places are simply cut off.
Ruby doesn’t do any rounding in this conversion.

#even? (Pair)

6.even? #=> true
7.even? #=> false

#odd? 

6.odd? #=> false
7.odd? #=> true

Substrings
You can access strings inside strings inside strings. Stringception! It’s super easy, too.

"hello"[0]      #=> "h"

"hello"[0..1]   #=> "he"

"hello"[0, 4]   #=> "hell"

"hello"[-1]     #=> "o"


Interpolation
String interpolation allows you to evaluate a string that contains placeholder variables. This is a very useful and 
common technique, so you will likely find yourself using this often. Be sure to use double quotes so that string 
interpolation will work!

name = "Odin"

puts "Hello, #{name}" #=> "Hello, Odin"
puts 'Hello, #{name}' #=> "Hello, #{name}"